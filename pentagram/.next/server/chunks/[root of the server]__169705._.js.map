{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 247, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Dream%20Homes/Desktop/headstarted%20accelerator/pentagram/pentagram/src/app/api/generate-image/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport { put } from '@vercel/blob';\r\nimport crypto from \"crypto\";\r\n\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const body = await request.json();\r\n    const { text } = body;\r\n\r\n    // TODO: Call your Image Generation API here\r\n    // For now, we'll just echo back the text\r\n\r\n    console.log(text);\r\n\r\n    const url = new URL(\"https://muhammadabdullahmahmood--pentagram-model-generate.modal.run/\");\r\n\r\n    url.searchParams.set(\"prompt\",text);\r\n\r\n    console.log(\"requesting URL\", url.toString());\r\n    \r\n    console.log(\"API_KEY\", process.env.API_KEY);\r\n\r\n    const response = await fetch(url.toString(), {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"X_API_KEY\":process.env.API_KEY || \"\",\r\n        Accept: \"image/jpeg\",\r\n      },\r\n    });\r\n\r\n\r\n    if(!response.ok){\r\n      const errorText = await response.text();\r\n      console.error(\"API response: \", errorText);\r\n      throw new Error(\r\n        `HTTP error! status: ${response.status}, message: ${errorText}`\r\n      );\r\n    }\r\n\r\n\r\n    const imageBuffer = await response.arrayBuffer();\r\n\r\n    const filename = `${crypto.randomUUID()}.jpg`\r\n\r\n    const blob = await put(filename, imageBuffer, {\r\n      access: \"public\",\r\n      contentType: \"image/jpeg\",\r\n    })\r\n\r\n\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      imageUrl: blob.url,\r\n    });\r\n\r\n\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { success: false, error: \"Failed to process request\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AAEA;AADA;;;;AAIO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,GAAG;QAEjB,4CAA4C;QAC5C,yCAAyC;QAEzC,QAAQ,GAAG,CAAC;QAEZ,MAAM,MAAM,IAAI,IAAI;QAEpB,IAAI,YAAY,CAAC,GAAG,CAAC,UAAS;QAE9B,QAAQ,GAAG,CAAC,kBAAkB,IAAI,QAAQ;QAE1C,QAAQ,GAAG,CAAC,WAAW,QAAQ,GAAG,CAAC,OAAO;QAE1C,MAAM,WAAW,MAAM,MAAM,IAAI,QAAQ,IAAI;YAC3C,QAAQ;YACR,SAAS;gBACP,aAAY,QAAQ,GAAG,CAAC,OAAO,IAAI;gBACnC,QAAQ;YACV;QACF;QAGA,IAAG,CAAC,SAAS,EAAE,EAAC;YACd,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,QAAQ,KAAK,CAAC,kBAAkB;YAChC,MAAM,IAAI,MACR,CAAC,oBAAoB,EAAE,SAAS,MAAM,CAAC,WAAW,EAAE,WAAW;QAEnE;QAGA,MAAM,cAAc,MAAM,SAAS,WAAW;QAE9C,MAAM,WAAW,GAAG,qGAAA,CAAA,UAAM,CAAC,UAAU,GAAG,IAAI,CAAC;QAE7C,MAAM,OAAO,MAAM,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EAAE,UAAU,aAAa;YAC5C,QAAQ;YACR,aAAa;QACf;QAIA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,UAAU,KAAK,GAAG;QACpB;IAGF,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAA4B,GACrD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 298, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}